myAWSIoTMQTTClient = None
myAWSIoTMQTTClient = AWSIoTMQTTClient(clientId)
myAWSIoTMQTTClient.configureEndpoint(host, 8883)
myAWSIoTMQTTClient.configureCredentials("{}RootCA1.pem".format(certPath), "{}Rpi-private.pem.key".format(certPath), "{}Rpi-cert.pem.crt".format(certPath))

# AWSIoTMQTTClient connection configuration
myAWSIoTMQTTClient.configureAutoReconnectBackoffTime(1, 32, 20)
myAWSIoTMQTTClient.configureOfflinePublishQueueing(-1)  # Infinite offline Publish queueing
myAWSIoTMQTTClient.configureDrainingFrequency(2)  # Draining: 2 Hz
myAWSIoTMQTTClient.configureConnectDisconnectTimeout(10)  # 10 sec
myAWSIoTMQTTClient.configureMQTTOperationTimeout(5)  # 5 sec
myAWSIoTMQTTClient.connect()

# temperature values
# Publish to the same topic in a loop forever
loopCount = 0
while True:
        dataHR=[]
        #print ("hello")
        time.sleep(5)   # Wait 5 seconds to place finger on the sensor.
        for i in range(5):

                red, ir = m.read_sequential()

                dataHR[i*100:(i+1)*100] = red    # For raw data capturing. Not required!
                hr, hr_valid, spo2, spo2_valid = hrcalc.calc_hr_and_spo2(ir[:100], red[:100])  # Calculating heart rate and SpO2 values from raw data.
                #print ("hello")
                #print(hr, hr_valid, spo2, spo2_valid)

#       messageJson = json.dumps({"HRvalue": hr, "HTvalid": hr_valid, "SpO2value":spo2,"SpO2valid":spo2_valid})
        id='1876'
        loc = 'Hall B'
        temp='98'

        messageJson = json.dumps({"ID": id,"HRvalue": hr,"SpO2value":spo2,"Temperature":temp,"Location":loc})
        myAWSIoTMQTTClient.publish(topic, messageJson, 1)
        print('Published topic %s: %s\n' % (topic, messageJson))
        loopCount += 1
        #print("hello")
        time.sleep(3)
myAWSIoTMQTTClient.disconnect()
